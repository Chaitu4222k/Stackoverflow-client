{"ast":null,"code":"import * as api from '../api';\nexport const fetchPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getPosts();\n    dispatch({\n      type: \"FETCH_ALL_POSTS\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"fetch posts error: \" + error);\n  }\n};\nexport const addPost = data => async dispatch => {\n  try {\n    // console.log(data);\n    const result = await api.addPost(data);\n    dispatch({\n      type: \"ADD_POST\",\n      payload: result\n    });\n    dispatch(fetchPosts());\n  } catch (err) {\n    console.log(\"add post error:\" + err);\n  }\n};\nexport const likePost = (id, userId) => async dispatch => {\n  try {\n    await api.likePost(id, userId);\n    dispatch(fetchPosts());\n  } catch (err) {\n    console.log(\"like post error:\" + err);\n  }\n};\nexport const dislikePost = (id, userId) => async dispatch => {\n  try {\n    await api.dislikePost(id, userId);\n    dispatch(fetchPosts());\n  } catch (err) {\n    console.log(\"dislike post error:\" + err);\n  }\n};\nexport const addComment = (postId, userId, content, name) => async dispatch => {\n  try {\n    const result = await api.addComment(postId, userId, content, name);\n    dispatch({\n      type: \"ADD_COMMENT\",\n      payload: {\n        postId,\n        comment: result\n      }\n    });\n    dispatch(fetchPosts());\n  } catch (err) {\n    console.log(\"add comment error: \" + err);\n  }\n};\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await api.deleteComment(postId, commentId);\n    dispatch({\n      type: \"DELETE_COMMENT\",\n      payload: {\n        postId,\n        commentId\n      }\n    });\n    dispatch(fetchPosts());\n  } catch (err) {\n    console.log(\"delete comment error: \" + err);\n  }\n};","map":{"version":3,"names":["api","fetchPosts","dispatch","data","getPosts","type","payload","error","console","log","addPost","result","err","likePost","id","userId","dislikePost","addComment","postId","content","name","comment","deleteComment","commentId"],"sources":["/home/chaitu/StackOverflow-clone/StackOverflow-clone/client/src/actions/posts.js"],"sourcesContent":["import * as api from '../api';\r\n\r\nexport const fetchPosts = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.getPosts();\r\n        dispatch({ type: \"FETCH_ALL_POSTS\", payload: data})\r\n    } catch (error) {\r\n        console.log(\"fetch posts error: \" + error)\r\n    }\r\n}\r\n\r\nexport const addPost = (data) => async (dispatch) => {\r\n    try {\r\n        // console.log(data);\r\n        const result = await api.addPost(data);\r\n        dispatch({ type: \"ADD_POST\", payload: result})\r\n        dispatch(fetchPosts())\r\n    } catch (err) {\r\n        console.log(\"add post error:\" + err)\r\n    }\r\n} \r\n\r\nexport const likePost = ( id, userId ) => async (dispatch) => {\r\n    try {\r\n        await api.likePost(id, userId);\r\n        dispatch(fetchPosts());\r\n    } catch (err) {\r\n        console.log(\"like post error:\" + err);\r\n    }\r\n}\r\n\r\nexport const dislikePost = ( id, userId ) => async (dispatch) => {\r\n    try {\r\n        await api.dislikePost(id, userId);\r\n        dispatch(fetchPosts());\r\n    } catch (err) {\r\n        console.log(\"dislike post error:\" + err);\r\n    }\r\n}\r\n\r\n\r\nexport const addComment = (postId, userId, content, name) => async (dispatch) => {\r\n    try {\r\n      const result = await api.addComment(postId, userId, content,name);\r\n      dispatch({ type: \"ADD_COMMENT\", payload: { postId, comment: result } });\r\n      dispatch(fetchPosts());\r\n    } catch (err) {\r\n      console.log(\"add comment error: \" + err);\r\n    }\r\n  };\r\n  \r\n  export const deleteComment = (postId, commentId) => async (dispatch) => {\r\n    try {\r\n      await api.deleteComment(postId, commentId);\r\n      dispatch({ type: \"DELETE_COMMENT\", payload: { postId, commentId } });\r\n      dispatch(fetchPosts());\r\n    } catch (err) {\r\n      console.log(\"delete comment error: \" + err);\r\n    }\r\n  };\r\n  \r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}