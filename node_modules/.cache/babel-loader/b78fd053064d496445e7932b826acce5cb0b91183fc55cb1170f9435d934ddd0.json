{"ast":null,"code":"import * as api from '../api';\n\n// ========================================== Question Functions ========================================\nexport const askQuestion = (questionData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.postQuestion(questionData);\n    dispatch({\n      type: \"POST_QUESTION\",\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchAllQuestions = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.getAllQuestions();\n    dispatch({\n      type: 'FETCH_ALL_QUESTIONS',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// async (dispatch) syntax for redux thunk\nexport const deleteQuestion = (id, navigate) => async dispatch => {\n  try {\n    await api.deleteQuestion(id);\n    dispatch(fetchAllQuestions());\n    navigate('/');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// ==========================================Answer Functions=========================================\nexport const postAnswer = answerData => async dispatch => {\n  try {\n    const {\n      id,\n      noOfAnswers,\n      answerBody,\n      userAnswered,\n      userId\n    } = answerData;\n    const {\n      data\n    } = await api.postAnswer(id, noOfAnswers, answerBody, userAnswered, userId);\n    dispatch({\n      type: 'POST_ANSWER',\n      payload: data\n    });\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteAnswer = (id, answerId, noOfAnswers) => async dispatch => {\n  try {\n    await api.deleteAnswer(id, answerId, noOfAnswers);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// ============================================ Vote Functions ============================================\n\nexport const voteQuestion = (id, value, userId) => async dispatch => {\n  try {\n    await api.voteQuestion(id, value, userId);\n    dispatch(fetchAllQuestions());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const askedQuestions = id => async dispatch => {\n  try {\n    const questions = await api.questionsAsked(id);\n    dispatch({\n      type: \"ASKED_QUESTIONS\",\n      payload: questions\n    });\n  } catch (err) {\n    console.log(\"asked Questions error\", err);\n  }\n};","map":{"version":3,"names":["api","askQuestion","questionData","navigate","dispatch","data","postQuestion","type","payload","fetchAllQuestions","error","console","log","getAllQuestions","deleteQuestion","id","postAnswer","answerData","noOfAnswers","answerBody","userAnswered","userId","deleteAnswer","answerId","voteQuestion","value","askedQuestions","questions","questionsAsked","err"],"sources":["/home/chaitu/StackOverflow-clone/StackOverflow-clone/client/src/actions/question.js"],"sourcesContent":["import * as api from '../api';\r\n\r\n// ========================================== Question Functions ========================================\r\nexport const askQuestion = (questionData, navigate) =>  async (dispatch) => {\r\n    try{\r\n        const { data }  = await api.postQuestion(questionData);\r\n        dispatch({ type:\"POST_QUESTION\", payload: data});\r\n        dispatch(fetchAllQuestions());\r\n        navigate('/');\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const fetchAllQuestions = () => async (dispatch) => {\r\n    try{\r\n        const { data } = await api.getAllQuestions();\r\n        dispatch({type: 'FETCH_ALL_QUESTIONS', payload:data});\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n// async (dispatch) syntax for redux thunk\r\nexport const deleteQuestion = (id, navigate) => async (dispatch) => {\r\n    try{\r\n        await api.deleteQuestion(id);\r\n        dispatch(fetchAllQuestions());\r\n        navigate('/');\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n// ==========================================Answer Functions=========================================\r\nexport const postAnswer = (answerData) => async (dispatch) =>{\r\n    try{\r\n        const { id, noOfAnswers, answerBody, userAnswered, userId} = answerData;\r\n        const {data } = await api.postAnswer(id, noOfAnswers, answerBody, userAnswered,userId);\r\n        dispatch({type: 'POST_ANSWER',payload:data});\r\n        dispatch(fetchAllQuestions());\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const deleteAnswer = (id,answerId,noOfAnswers) => async (dispatch) => {\r\n    try{\r\n        await api.deleteAnswer(id, answerId, noOfAnswers);\r\n        dispatch(fetchAllQuestions());\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n// ============================================ Vote Functions ============================================\r\n\r\nexport const voteQuestion = (id, value, userId) => async (dispatch) => {\r\n    try{\r\n        await api.voteQuestion(id, value, userId);\r\n        dispatch(fetchAllQuestions());\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const askedQuestions = (id) => async (dispatch) => {\r\n    try {\r\n        const questions = await api.questionsAsked(id);\r\n\r\n        dispatch({ type: \"ASKED_QUESTIONS\" , payload: questions })\r\n    } catch (err){\r\n        console.log(\"asked Questions error\",err);\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}