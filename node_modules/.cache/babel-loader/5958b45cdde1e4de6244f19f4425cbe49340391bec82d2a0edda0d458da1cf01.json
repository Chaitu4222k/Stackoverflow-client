{"ast":null,"code":"import * as api from '../api';\nexport const handlePayment = (id, amount) => async dispatch => {\n  try {\n    const {\n      data: {\n        order\n      }\n    } = await api.order(amount);\n    // console.log(data);\n    const options = {\n      key: 'rzp_test_A0QY0DIealHglQ',\n      amount: order.amount,\n      currency: \"INR\",\n      name: \"StackOverflow Plan\",\n      description: \"Tutorial of RazorPay\",\n      image: \"https://w7.pngwing.com/pngs/784/593/png-transparent-answer-coding-hexagon-media-networking-social-stackoverflow-hexagon-social-medias-icon-thumbnail.png\",\n      order_id: order.id,\n      handler: async function (response) {\n        console.log(\"Response\", response);\n        const result = await api.verifyOrder({\n          id,\n          amount,\n          response\n        });\n        console.log(result);\n        if (result.data.success === true) {\n          alert(\"New Subscription Plan is activated. Please login again to see the affects.\");\n        } else {\n          alert(\"The Plan has failed to activate!!! Contact us later.\");\n        }\n      },\n      prefill: {\n        name: \"Leelavardhan\",\n        email: \"leelavardhan@example.com\",\n        contact: \"9182363131\"\n      },\n      notes: {\n        \"address\": \"Razorpay Corporate Office\"\n      },\n      theme: {\n        \"color\": \"#121212\"\n      }\n    };\n    const razor = new window.Razorpay(options);\n    razor.open();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const checkSubscription = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.checkSubs(id);\n    console.log(data);\n    if (data.subs === 'free') {\n      dispatch({\n        type: \"UPDATE_CURRENT_USER\",\n        payload: data.newUser\n      });\n      alert(\"Your monthly subscription has ended!!!\");\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"names":["api","handlePayment","id","amount","dispatch","data","order","options","key","currency","name","description","image","order_id","handler","response","console","log","result","verifyOrder","success","alert","prefill","email","contact","notes","theme","razor","window","Razorpay","open","err","checkSubscription","checkSubs","subs","type","payload","newUser"],"sources":["/home/chaitu/StackOverflow-clone/StackOverflow-clone/client/src/actions/Subscription.js"],"sourcesContent":["import * as api from '../api'\r\n\r\nexport const handlePayment = (id, amount) => async (dispatch) => {\r\n    try{    \r\n        const { data: {order} } = await api.order(amount);\r\n        // console.log(data);\r\n        const options = {\r\n                key:'rzp_test_A0QY0DIealHglQ',\r\n                amount: order.amount,\r\n                currency: \"INR\",\r\n                name: \"StackOverflow Plan\",\r\n                description: \"Tutorial of RazorPay\",\r\n                image: \"https://w7.pngwing.com/pngs/784/593/png-transparent-answer-coding-hexagon-media-networking-social-stackoverflow-hexagon-social-medias-icon-thumbnail.png\",\r\n                order_id: order.id,\r\n                handler: async function (response){\r\n                    console.log(\"Response\",response);\r\n                    const result = await api.verifyOrder({id, amount, response});\r\n                    console.log(result);\r\n                    if(result.data.success === true){\r\n                        alert(\"New Subscription Plan is activated. Please login again to see the affects.\");\r\n                    } else {\r\n                        alert(\"The Plan has failed to activate!!! Contact us later.\")\r\n                    }\r\n                },\r\n                prefill: {\r\n                    name: \"Leelavardhan\",\r\n                    email: \"leelavardhan@example.com\",\r\n                    contact: \"9182363131\"\r\n                },\r\n                notes: {\r\n                    \"address\": \"Razorpay Corporate Office\"\r\n                },\r\n                theme: {\r\n                    \"color\": \"#121212\"\r\n                }\r\n            };\r\n            const razor = new window.Razorpay(options);\r\n            razor.open();\r\n    } catch (err){\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const checkSubscription = (id) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.checkSubs(id);\r\n        console.log(data);\r\n        if(data.subs === 'free'){\r\n            dispatch({ type: \"UPDATE_CURRENT_USER\", payload: data.newUser })\r\n            alert(\"Your monthly subscription has ended!!!\");\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,QAAQ;AAE7B,OAAO,MAAMC,aAAa,GAAGA,CAACC,EAAE,EAAEC,MAAM,KAAK,MAAOC,QAAQ,IAAK;EAC7D,IAAG;IACC,MAAM;MAAEC,IAAI,EAAE;QAACC;MAAK;IAAE,CAAC,GAAG,MAAMN,GAAG,CAACM,KAAK,CAACH,MAAM,CAAC;IACjD;IACA,MAAMI,OAAO,GAAG;MACRC,GAAG,EAAC,yBAAyB;MAC7BL,MAAM,EAAEG,KAAK,CAACH,MAAM;MACpBM,QAAQ,EAAE,KAAK;MACfC,IAAI,EAAE,oBAAoB;MAC1BC,WAAW,EAAE,sBAAsB;MACnCC,KAAK,EAAE,0JAA0J;MACjKC,QAAQ,EAAEP,KAAK,CAACJ,EAAE;MAClBY,OAAO,EAAE,eAAAA,CAAgBC,QAAQ,EAAC;QAC9BC,OAAO,CAACC,GAAG,CAAC,UAAU,EAACF,QAAQ,CAAC;QAChC,MAAMG,MAAM,GAAG,MAAMlB,GAAG,CAACmB,WAAW,CAAC;UAACjB,EAAE;UAAEC,MAAM;UAAEY;QAAQ,CAAC,CAAC;QAC5DC,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;QACnB,IAAGA,MAAM,CAACb,IAAI,CAACe,OAAO,KAAK,IAAI,EAAC;UAC5BC,KAAK,CAAC,4EAA4E,CAAC;QACvF,CAAC,MAAM;UACHA,KAAK,CAAC,sDAAsD,CAAC;QACjE;MACJ,CAAC;MACDC,OAAO,EAAE;QACLZ,IAAI,EAAE,cAAc;QACpBa,KAAK,EAAE,0BAA0B;QACjCC,OAAO,EAAE;MACb,CAAC;MACDC,KAAK,EAAE;QACH,SAAS,EAAE;MACf,CAAC;MACDC,KAAK,EAAE;QACH,OAAO,EAAE;MACb;IACJ,CAAC;IACD,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAACC,QAAQ,CAACtB,OAAO,CAAC;IAC1CoB,KAAK,CAACG,IAAI,CAAC,CAAC;EACpB,CAAC,CAAC,OAAOC,GAAG,EAAC;IACTf,OAAO,CAACC,GAAG,CAACc,GAAG,CAAC;EACpB;AACJ,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAI9B,EAAE,IAAK,MAAOE,QAAQ,IAAK;EACzD,IAAI;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAML,GAAG,CAACiC,SAAS,CAAC/B,EAAE,CAAC;IACxCc,OAAO,CAACC,GAAG,CAACZ,IAAI,CAAC;IACjB,IAAGA,IAAI,CAAC6B,IAAI,KAAK,MAAM,EAAC;MACpB9B,QAAQ,CAAC;QAAE+B,IAAI,EAAE,qBAAqB;QAAEC,OAAO,EAAE/B,IAAI,CAACgC;MAAQ,CAAC,CAAC;MAChEhB,KAAK,CAAC,wCAAwC,CAAC;IACnD;EACJ,CAAC,CAAC,OAAOU,GAAG,EAAE;IACVf,OAAO,CAACC,GAAG,CAACc,GAAG,CAAC;EACpB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}